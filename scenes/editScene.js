const {Markup, Scenes} = require("telegraf");
const {makeKeyboard} = require("../helpers/keyboard");
const { WizardScene } = Scenes;
const {supabase} = require("../supabase");
const {getUserFormDB, sendProfile} = require("../helpers/getUserFormDB");
const {skillsDict, hobbiesDict} = require("../config");
const {uploadImage} = require("../helpers/uploadImage");
const {track} = require("@amplitude/analytics-node");

const fieldsDict = {
    "–ò–º—è": "name",
    "–§–æ—Ç–æ": "profile_photo_url",
    "–û–ø–∏—Å–∞–Ω–∏–µ": "description",
    "–ó–∞–ø—Ä–æ—Å—ã": "requests",
    "–°—É–ø–µ—Ä—Å–∏–ª–∞": "superpower",
    "–ù–∞–≤—ã–∫–∏": "skills",
    "–£–≤–ª–µ—á–µ–Ω–∏—è": "hobbies",

}

const checkCorrectAnswer = (ctx, prefix, isText) => {
    if(!ctx.callbackQuery) return false;
    const {data} = ctx.callbackQuery;
    const [answer_prefix, answer] = data.split('_');
    if (answer_prefix === prefix) {
        ctx.wizard.state.editField = answer;
        return true;
    }
    return false;
}

const editScene = new WizardScene(
    'editScene',
    async (ctx) => {
        await ctx.reply(
            '–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å?',
            Markup.inlineKeyboard(
                makeKeyboard(
                    ['–ò–º—è', "–§–æ—Ç–æ", "–û–ø–∏—Å–∞–Ω–∏–µ", "–°—É–ø–µ—Ä—Å–∏–ª–∞", "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤—ã–π—Ç–∏"],
                    2, 'edit'),
                {columns: 3}
            )
        );
        ctx.session.skills = []
        ctx.session.hobbies = []
        return ctx.wizard.next();
    },
    async (ctx) => {
        // 1 Wait for text answer
        if(!checkCorrectAnswer(ctx, 'edit')) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"');
            return ctx.scene.enter('editScene');
        }
        await ctx.answerCbQuery();
        const answer = ctx.callbackQuery?.data.split('_')[1]
        ctx.session.editField = answer;
        if(answer === '–ò–º—è') {
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è')
        }
        if(answer === '–§–æ—Ç–æ') {
            await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ')
        }
        if(answer === '–û–ø–∏—Å–∞–Ω–∏–µ') {
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
        }
        if(answer === '–°—É–ø–µ—Ä—Å–∏–ª–∞') {
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
        }
        if(answer === '–ù–∞–≤—ã–∫–∏') {
            await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞')
            if(ctx.session.skills.length < 5) {
                return ctx.wizard.selectStep(4);
            }
        }
        if(answer === '–£–≤–ª–µ—á–µ–Ω–∏—è') {
            await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞')
            if(ctx.session.skills.length < 5) {
                return ctx.wizard.selectStep(4);
            }
        }
        if(answer === '–ó–∞–ø—Ä–æ—Å—ã') {
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
        }
        if(answer === 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤—ã–π—Ç–∏') {
            await ctx.reply('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
            return ctx.scene.leave();
        }
        return ctx.wizard.next();
    },
    async (ctx) => {
        const {editField} = ctx.session;
        const answer = ctx.callbackQuery?.data.split('_')[1]
        let data = ctx.message?.text
        const fieldName = fieldsDict[editField];
        // handle checkboxes and radio
        if(answer){
            if(ctx.session.currentField === 'skills') {
                data = ctx.session.skills.map(skill => skillsDict.find(item => item.name === skill).id).join(',')
            }
            if(ctx.session.currentField === 'hobbies') {
                data = ctx.session.hobbies.map(hobby => hobbiesDict.find(item => item.name === hobby).id).join(',')
            }
        }
        // handle photo
        if(fieldName === 'profile_photo_url') {
            if(ctx.message.photo){
                const photoUrl = await ctx.telegram.getFileLink(ctx.message.photo[ctx.message.photo.length - 1].file_id);
                const cdnURL = await uploadImage(photoUrl, ctx);
                data = cdnURL
            } else {
                await ctx.reply('–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞');
                track('sent photo as text', {
                    username: ctx.from.username,
                })
                return ctx.scene.enter('editScene');
            }
        }
        // save data to DB
        const userNickname = ctx.from.username;
        const { error } = await supabase
            .from('Users')
            .update({ [fieldName]: data })
            .eq('telegram', userNickname)
        // errors?
        if(error) {
            console.log(error)
        } else {
            await sendProfile(ctx)
            await ctx.reply('‚úÖ–ì–æ—Ç–æ–≤–æ. –ß—Ç–æ —Ç–æ –µ—â–µ?',Markup.inlineKeyboard(makeKeyboard(['–î–∞','–ù–µ—Ç'], 3, 'isMore'), {columns: 3}));
            return ctx.wizard.next();
        }
        ctx.session.tgNick = null;
        // if(!ctx.message) {
        //     await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
        //     return ctx.wizard.selectStep(2);
        // }
    },
    async (ctx) => {
        // 3 Manage answer and go to next step
        if(!checkCorrectAnswer(ctx, 'isMore')) {
            // ctx.reply(ctx.callbackQuery?.data || ctx.message.text)
            await ctx.reply('–ù–µ –ø–æ–Ω—è–ª –≤–∞—Å, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ',Markup.inlineKeyboard(makeKeyboard(['–î–∞','–ù–µ—Ç'], 3, 'isMore'), {columns: 3}));
            return ctx.wizard.selectStep(3);
        }
        const answer = ctx.callbackQuery?.data.split('_')[1]
        if (answer === '–î–∞') {
            await ctx.answerCbQuery();
            await ctx.scene.enter('editScene');
        } else {
            await ctx.reply('üëç');
            await ctx.scene.leave();
        }
    },
    // Handle multy select
    async (ctx) => {
        // 3 Manage answer and go to next step
        if(!checkCorrectAnswer(ctx, 'skills') || !checkCorrectAnswer(ctx, 'hobbies')) {
            await ctx.reply('–ù–µ –ø–æ–Ω—è–ª –≤–∞—Å, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ',Markup.inlineKeyboard(makeKeyboard(['–î–∞','–ù–µ—Ç'], 3, 'isMore'), {columns: 3}));
            return ctx.wizard.selectStep(3);
        }
        const answer = ctx.callbackQuery?.data.split('_')[1]
        if (answer === '–î–∞') {
            await ctx.answerCbQuery();
            await ctx.scene.enter('editScene');

        } else {
            await ctx.reply('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:');
            const {user, error} = await getUserFormDB(ctx.session.tgNick);
            await sendProfile(ctx);
            await ctx.scene.leave();
        }
    },
);

module.exports = {editScene};