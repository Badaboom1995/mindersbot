const {Markup, Scenes} = require("telegraf");
const {makeKeyboard} = require("../helpers/keyboard");
const { WizardScene} = Scenes;
const {supabase} = require("../supabase");
const {getMissingData} = require("../helpers/getMissingData");
const {skillsDict, hobbiesDict, groupsDict} = require("../config");
const {uploadImage} = require("../helpers/uploadImage");
const {track} = require("@amplitude/analytics-node");
const {sendProfile} = require("../helpers/getUserFormDB");

// const checkCorrectAnswer = (ctx, prefix, isText) => {
//     if(!ctx.callbackQuery) return false;
//     const {data} = ctx.callbackQuery;
//     const [answer_prefix, answer] = data.split('_');
//     if (answer_prefix === prefix) {
//         ctx.wizard.state.editField = answer;
//         return true;
//     }
//     return false;
// }

const dataDict = {
    groups: '–ö –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å',
    name: '–ò–º—è',
    profile_photo_url: '–§–æ—Ç–æ',
    description: '–û–ø–∏—Å–∞–Ω–∏–µ',
    requests: '–ó–∞–ø—Ä–æ—Å—ã',
    superpower: '–°—É–ø–µ—Ä—Å–∏–ª–∞',
    // skills: '–ù–∞–≤—ã–∫–∏',
    // hobbies: '–£–≤–ª–µ—á–µ–Ω–∏—è',
}

const saveMultyToDB = async (ctx, answer) => {
    let data
    if(answer){
        if(ctx.session.currentField === 'skills') {
            data = ctx.session.skills.map(skill => skillsDict.find(item => item.name === skill).id).join(',')
        }
        if(ctx.session.currentField === 'hobbies') {
            data = ctx.session.hobbies.map(hobby => hobbiesDict.find(item => item.name === hobby).id).join(',')
        }
    }
    await supabase
        .from('Users')
        .update({ [ctx.session.currentField]: data })
        .eq('telegram', ctx.from.username);

    await ctx.answerCbQuery();
    ctx.session.missingData.shift();
}

const profileNormalizeScene = new WizardScene(
    'profileNormalize',
    async (ctx) => {
        const answer = ctx.callbackQuery?.data.split('_')[1]
        const prefix = ctx.callbackQuery?.data.split('_')[0]
        if(prefix === 'done'){
            let data
            if(answer){
                if(ctx.session.currentField === 'skills') {
                    data = ctx.session.skills.map(skill => skillsDict.find(item => item.name === skill).id).join(',')
                }
                if(ctx.session.currentField === 'hobbies') {
                    data = ctx.session.hobbies.map(hobby => hobbiesDict.find(item => item.name === hobby).id).join(',')
                }
                if(ctx.session.currentField === 'groups') {
                    data = ctx.session.groups.join(',')
                }
            }
            await supabase
                .from('Users')
                .update({ [ctx.session.currentField]: data })
                .eq('telegram', ctx.from.username);

            await ctx.answerCbQuery();
            ctx.session.missingData.shift();
        }

        if(!ctx.session.missingData) {
            track('normalize scene entered', undefined, {user_id: ctx.from.username})
            // ctx.session.missingData = getMissingData(ctx.session.user).filter(field => dataDict.hasOwnProperty(field));
            const missingData = getMissingData(ctx.session.user)
            ctx.session.missingData = Object.keys(dataDict).reduce((acc, key) => missingData.includes(key) ? [...acc, key] : acc, [])
            if(!ctx.session.missingData.includes('skills')){ctx.session.missingData.push('skills')}
            if(!ctx.session.missingData.includes('hobbies')){ctx.session.missingData.push('hobbies')}
            ctx.session.skills = [];
            ctx.session.hobbies = [];
            ctx.session.groups = [];
            ctx.session.hobbiesMessages = []
            ctx.session.skillsMessages = []
            ctx.session.groupsMessages = []
        }

        ctx.session.currentField = ctx.session.missingData[0];

        // if(!ctx.callbackQuery) {
//             await ctx.reply(`–û—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–ª—è:
// - ${ctx.session.missingData.map(item => dataDict[item]).join("\n- ")}`);
//         }
        switch (ctx.session.currentField) {
            case 'name':
                 await ctx.reply('–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –£–∫–∞–∂–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é');
                break;
            case 'profile_photo_url':
                 await ctx.reply('–ü—Ä–∏—à–ª–∏ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è. –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–µ');
                break;
            case 'description':
                 await ctx.reply('–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –æ–ø—ã—Ç–µ. –ù–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.');
                break;
            case 'requests':
                 await ctx.reply('–ö–∞–∫–∏–µ —É —Ç–µ–±—è –∑–∞–ø—Ä–æ—Å—ã –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É? –ß—Ç–æ –æ–∂–∏–¥–∞–µ—à—å –æ—Ç –Ω–µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å?');
                break;
            case 'superpower':
                 await ctx.reply('–ö–∞–∫–∞—è —É —Ç–µ–±—è —Å—É–ø–µ—Ä —Å–∏–ª–∞? –ö–∞–∫ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å, –≤ —á–µ–º —Ç–µ–±–µ –Ω–µ—Ç —Ä–∞–≤–Ω—ã—Ö?');
                break;
            case 'skills':
                if(ctx.session.skills.length >= 5) {
                    await ctx.reply(`–í—ã–±—Ä–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`);
                    await saveMultyToDB(ctx, answer)
                    ctx.session.skillsMessages.forEach(msg => {
                        ctx.telegram.deleteMessage(msg.chat.id, msg.message_id)
                    })
                    return ctx.scene.enter('profileNormalize');
                }
                 if(answer && prefix === 'skills'){
                     track('skill added', {skill:answer}, {user_id: ctx.from.username})
                    await ctx.answerCbQuery();
                     if(ctx.session.skills.includes(answer)){
                         await ctx.reply(`‚ùå –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ ${answer}`);
                     } else {
                         ctx.session.skills.push(answer);
                         await ctx.reply(`‚úÖ –î–æ–±–∞–≤–∏–ª ${answer}`);
                     }
                 }
                 else {
                     const skills = skillsDict.map(item => item.name)
                     const msgOne = await ctx.reply('–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏. –ù–µ –±–æ–ª–µ–µ 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.', Markup.inlineKeyboard(makeKeyboard(skills, 1, 'skills'), {columns: 3}));
                     const msgTwo = await ctx.reply('–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏. –ù–µ –±–æ–ª–µ–µ 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.')
                     const msgThree = await ctx.reply('–ù–∞–∂–º–∏ "–ì–æ—Ç–æ–≤–æ" –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å', Markup.inlineKeyboard(makeKeyboard(['üíæ –ì–æ—Ç–æ–≤–æ'], 3, 'done'), {columns: 3}));
                     ctx.session.skillsMessages.push(msgOne, msgTwo, msgThree)
                 }
                 return ctx.wizard.selectStep(0)
                break;
            case 'hobbies':
                if(ctx.session.hobbies.length >= 5) {
                    await ctx.reply(`–í—ã–±—Ä–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`);
                    await saveMultyToDB(ctx, answer)
                    ctx.session.hobbiesMessages.forEach(msg => {
                        ctx.telegram.deleteMessage(msg.chat.id, msg.message_id)
                    })
                    // ctx.telegram.deleteMessage(ctx.session.hobbiesMessage.chat.id, ctx.session.hobbiesMessage.message_id)
                    return ctx.scene.enter('profileNormalize');
                }
                if(answer && prefix === 'hobbies'){
                    await ctx.answerCbQuery();
                    track('hobby added', {hobby:answer}, {user_id: ctx.from.username})
                    if(ctx.session.hobbies.includes(answer)){
                        await ctx.reply(`‚ùå –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ ${answer}`);
                        // return ctx.scene.enter('profileNormalize');
                    } else {
                        ctx.session.hobbies.push(answer);
                        await ctx.reply(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${answer}`);
                    }
                }
                else {
                    const hobbies = hobbiesDict.map(item => item.name)
                    const msgOne = await ctx.reply('–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ —É–≤–ª–µ—á–µ–Ω–∏—è –∏ —Ö–æ–±–±–∏. –ù–µ –±–æ–ª–µ–µ 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.', Markup.inlineKeyboard(makeKeyboard(hobbies, 1, 'hobbies'), {columns: 3}));
                    const msgTwo = await ctx.reply('–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ —É–≤–ª–µ—á–µ–Ω–∏—è –∏ —Ö–æ–±–±–∏. –ù–µ –±–æ–ª–µ–µ 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.')
                    const msgThree = await ctx.reply('–ù–∞–∂–º–∏ "–ì–æ—Ç–æ–≤–æ" –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å', Markup.inlineKeyboard(makeKeyboard(['üíæ –ì–æ—Ç–æ–≤–æ'], 3, 'done'), {columns: 3}));
                    ctx.session.hobbiesMessages.push(msgOne, msgTwo, msgThree)
                }
                return ctx.wizard.selectStep(0)
                break;
            case 'groups':
                if(ctx.session.groups.length >= 4) {
                    await ctx.reply(`–í—ã–±—Ä–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`);
                    await saveMultyToDB(ctx, answer)
                    // ctx.session.hobbiesMessages.forEach(msg => {
                    //     ctx.telegram.deleteMessage(msg.chat.id, msg.message_id)
                    // })
                    // ctx.telegram.deleteMessage(ctx.session.hobbiesMessage.chat.id, ctx.session.hobbiesMessage.message_id)
                    return ctx.scene.enter('profileNormalize');
                }
                if(answer && prefix === 'groups'){
                    await ctx.answerCbQuery();
                    track('group added', {group:answer}, {user_id: ctx.from.username})
                    if(ctx.session.groups.includes(answer)){
                        await ctx.reply(`‚ùå –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ ${answer}`);
                    } else {
                        ctx.session.groups.push(answer);
                        await ctx.reply(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${answer}`);
                    }
                }
                if(ctx.session.groups.length === 0) {
                    await ctx.reply('–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—ã –∫ –∫–æ—Ç–æ—Ä—ã–º —Å–µ–±—è –æ—Ç–Ω–æ—Å–∏—à—å.', Markup.inlineKeyboard(makeKeyboard(groupsDict, 1, 'groups'), {columns: 3}));
                    await ctx.reply('–ù–∞–∂–º–∏ "–ì–æ—Ç–æ–≤–æ" –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å', Markup.inlineKeyboard(makeKeyboard(['üíæ –ì–æ—Ç–æ–≤–æ'], 3, 'done'), {columns: 3}));
                    // ctx.session.groupsMessages.push(msgOne, msgTwo)
                }
                return ctx.wizard.selectStep(0)
                break;
            default:
                await supabase
                    .from('Users')
                    .update({ is_updated: true })
                    .eq('telegram', ctx.from.username);
                await sendProfile(ctx, false)
                // send inline keyboard
                await ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –≤—Å—Ç—Ä–µ—á—É', Markup.inlineKeyboard(makeKeyboard(['–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ø—Ä–æ—Å—É'], 2, 'done'), {columns: 2}));
                track('profile is ready', undefined, {user_id: ctx.from.username})
                ctx.session.missingData = null
                // return ctx.scene.enter('requestScene');
        }
        return ctx.wizard.next();
    },


    async (ctx) => {
        const answer = ctx.callbackQuery?.data.split('_')[1]
        const prefix = ctx.callbackQuery?.data.split('_')[0]
        let data = ctx.message?.text
        if(prefix === 'done') {
            return ctx.scene.enter('requestScene');
        }
        if(answer){
            if(ctx.session.currentField === 'skills') {
                data = ctx.session.skills.map(skill => skillsDict.find(item => item.name === skill).id).join(',')
            }
            if(ctx.session.currentField === 'hobbies') {
                data = ctx.session.hobbies.map(hobby => hobbiesDict.find(item => item.name === hobby).id).join(',')
            }
            if(ctx.session.currentField === 'groups') {
                data = ctx.session.groups.join(',')
            }
        }
        if(ctx.session.currentField === 'profile_photo_url') {
            if(ctx.message.photo){
                const photoUrl = await ctx.telegram.getFileLink(ctx.message.photo[ctx.message.photo.length - 1].file_id);
                const cdnURL = await uploadImage(photoUrl, ctx);
                data = cdnURL
            } else {
                await ctx.reply('–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞');
                track('sent photo as text', undefined, {user_id: ctx.from.username})
                return ctx.scene.enter('profileNormalize');
            }
        }
        // console.log(photoUrl)
        // 2 save to db
        const { error } = await supabase
            .from('Users')
            .update({ [ctx.session.currentField]: data })
            .eq('telegram', ctx.from.username);

        if(error) {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞');
            track('profile normalize save error', undefined, {user_id: ctx.from.username})
            return ctx.scene.enter('profileNormalize');

        } else {
            await ctx.reply('‚úÖ –°–æ—Ö—Ä–∞–Ω–∏–ª');
            track('profile normalize saved prop', undefined, {user_id: ctx.from.username})
            ctx.session.missingData.shift();
            return ctx.scene.enter('profileNormalize');
        }
    },
);

module.exports = {profileNormalizeScene};